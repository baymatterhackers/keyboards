/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

// Log to USB (not working yet)
// CONFIG_ZMK_USB_LOGGING=y
/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 2 ESC       &kp N1   &kp N2  &kp N3            &kp N4        &kp N5                                     &kp N6         &kp N7  &kp N8     &kp N9            &kp N0             &kp BACKSPACE
&lt 2 TAB       &kp Q    &kp W   &kp E             &kp R         &kp T                                      &kp Y          &kp U   &kp I      &kp O             &kp P              &kp RET
&kp MINUS       &lt 1 A  &kp S   &kp D             &kp F         &kp G                                      &kp H          &kp J   &kp K      &kp L             &lt 1 SEMICOLON    &kp SQT
&kp LEFT_SHIFT  &kp Z    &kp X   &kp C             &kp V         &kp B         &kp LEFT_GUI  &kp RIGHT_GUI  &kp N          &kp M   &kp COMMA  &kp PERIOD        &kp SLASH          &kp RIGHT_SHIFT
&mo 1           &trans   &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE     &kp SPACE      &kp RIGHT_GUI  &trans  &kp PIPE   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &mo 1
            >;
        };

        raise_layer {
            bindings = <
&kp GRAVE  &kp F1  &kp F2          &kp F3          &kp F4           &kp F5                  &kp F6  &kp F7          &kp F8          &kp F9           &kp F10  &kp DEL
&trans     &trans  &trans          &kp UP_ARROW    &trans           &trans                  &trans  &trans          &kp UP_ARROW    &trans           &trans   &trans
&kp PLUS   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans   &trans
&trans     &trans  &trans          &trans          &trans           &trans  &trans  &trans  &trans  &trans          &trans          &trans           &trans   &trans
&trans     &trans  &trans          &trans          &trans           &trans  &trans  &trans  &trans  &trans          &trans          &trans           &trans   &trans
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp K_PREV  &kp K_PLAY_PAUSE   &kp K_NEXT       &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans             &trans           &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans             &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans             &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                         &kp CARET        &kp AMPS         &kp ASTRK        &kp LPAR         &kp RPAR         &ext_power EP_TOG
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                      &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&bt BT_NXT  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans        &trans                            &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &trans
&bt BT_PRV  &trans        &trans        &trans        &trans        &trans        &kp LBRC  &kp RBRC  &trans           &trans           &trans           &trans           &trans           &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans    &trans           &trans           &trans           &trans           &trans           &trans
            >;
        };
    };
};
